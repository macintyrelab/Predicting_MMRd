# -*- coding: utf-8 -*-
"""ML_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HVGPBLO9Zi4q8MgIIJ9cQEUDzQIERmIC
"""

# Importing the python modules needed for the classifiers analysis
from google.colab import drive
import pandas as pd
import numpy as np
import scipy.spatial
import matplotlib.pyplot as plt
from random import sample
import itertools
from sklearn.model_selection import LeavePOut
from sklearn.naive_bayes import ComplementNB
from sklearn.metrics import accuracy_score, classification_report

# Conecting to my Google drive account
drive.mount('/content/drive')

# Importing my dataset "dataset16.csv"
data_frame = pd.read_csv('/content/drive/MyDrive/ML_Database.txt', sep = "\t")
data_frame = data_frame.drop(columns=["HISTOTYPE", "PCR", "IHQ"])
data_frame = data_frame.reset_index(drop=True)
data_frame

mmr = data_frame.loc[data_frame["DIAGNOSIS"]=="MMRd"]
not_mmr = data_frame.loc[data_frame["DIAGNOSIS"]=="MMRp"]
mmr = mmr.reset_index()
mmr = mmr.drop(columns = "index")
not_mmr = not_mmr.reset_index()
not_mmr = not_mmr.drop(columns = "index")

true_mmr = data_frame.loc[data_frame["DIAGNOSIS"]=="MMRd"]
false_not_mmr = data_frame.loc[(data_frame["DIAGNOSIS"]=="MMRp") & (data_frame["NGS_MMRd"]==1)]
mmr = pd.concat([true_mmr, false_not_mmr])
not_mmr = data_frame.loc[(data_frame["DIAGNOSIS"]=="MMRp") & (data_frame["NGS_MMRd"]==0)]
mmr = mmr.reset_index()
mmr = mmr.drop(columns = "index")
not_mmr = not_mmr.reset_index()
not_mmr = not_mmr.drop(columns = "index")

not_mmr

mmr

intercept = [0]
coef = [0, 0, 0, 0, 0]
errors_NB = []
for test1 in range(0, len(mmr)):
  for test2 in itertools.combinations(range(0, len(not_mmr)), 2):
    #print(test1, test2)
    test = pd.concat([mmr.iloc[test1:test1+1,:], not_mmr.iloc[test2[0]:test2[0]+1,:], not_mmr.iloc[test2[1]:test2[1]+1,:]])
    train = pd.concat([not_mmr.drop([test2[0], test2[1]]), mmr.drop(test1)])
    X_train = np.asarray(train.iloc[:,2:])
    X_test = np.asarray(test.iloc[:,2:])
    y_train = np.asarray(train.iloc[:,-6])
    y_test = np.asarray(test.iloc[:,-6])
    classifier = ComplementNB()
    classifier.fit(X_train, y_train)
    prediction = classifier.predict(X_test)
    #print(test)
    #print(y_test)
    #print(prediction)
    prediction_train = classifier.predict(X_train)
    # Checking the result on the test examples to see which points were miscalculated
    # Checking the result on the test examples to see which points were miscalculated
    contTest = 0
    for i in range(0,len(y_test)):
      if prediction[i] == y_test[i]:
        contTest = contTest + 1
      else:
        errors_NB += ['Error in the testing point: Patient with data: ' + str(X_test[i]) + ', was predicted as ' + str(prediction[i]) + ', when he/she was ' + str(y_test[i])]

coef_CNB = coef/119357
intercept_CNB = intercept/119357
print(coef_CNB, intercept_CNB)

output_file = open('errors_CNB_data2.txt', 'w')
for error in errors_NB:
    output_file.write(error)
    output_file.write("\n")
output_file.close()

coef = [0, 0, 0, 0, 0]
intercept = [0]
errors = []
for test1 in range(0, len(mmr)):
  for test2 in itertools.combinations(range(0, len(not_mmr)), 2):
    #print(test1, test2)
    test = pd.concat([mmr.iloc[test1:test1+1,:], not_mmr.iloc[test2[0]:test2[0]+1,:], not_mmr.iloc[test2[1]:test2[1]+1,:]])
    train = pd.concat([not_mmr.drop([test2[0], test2[1]]), mmr.drop(test1)])
    X_train = np.asarray(train.iloc[:,2:])
    X_test = np.asarray(test.iloc[:,2:])
    y_train = np.asarray(train.iloc[:,-6])
    y_test = np.asarray(test.iloc[:,-6])
    classifier = LogisticRegression(penalty = 'none', class_weight='balanced')
    classifier.fit(X_train, y_train)
    prediction = classifier.predict(X_test)
    #print(test)
    #print(y_test)
    #print(prediction)
    prediction_train = classifier.predict(X_train)
    # Checking the result on the test examples to see which points were miscalculated
    contTest = 0
    for i in range(0,len(y_test)):
      new_coef = np.array(classifier.coef_.tolist(), dtype=float)
      coef = coef + new_coef
      intercept = intercept + classifier.intercept_
      print(coef, intercept)
      if prediction[i] == y_test[i]:
        contTest = contTest + 1
      else:
        errors += ['Error in the testing point: Patient with data: ' + str(X_test[i]) + ', was predicted as ' + str(prediction[i]) + ', when he/she was ' + str(y_test[i])]

coef_LogR = coef/119357
intercept_LogR = intercept/119357
print(coef_LogR, intercept_LogR)

output_file = open('errors_LG_data2.txt', 'w')
for error in errors:
    output_file.write(error)
    output_file.write("\n")
output_file.close()

logR_equation = coef_LogR[0].tolist()
for i in range(0,len(data_frame)):
  y = data_frame["NGS_MMRd"][i]*logR_equation[0] + data_frame["MSI"][i]*logR_equation[1] + data_frame["TMB"][i]*logR_equation[2] + data_frame["ID_Signature"][i]*logR_equation[3] + data_frame["CNV"][i]*logR_equation[4] 
  
  #print(data_frame["NGS_MMRd"][i]*logR_equation[0])
  #print(data_frame["MSI"][i]*logR_equation[1])
  #print(data_frame["TMB"][i]*logR_equation[2])
  #print(data_frame["ID_Signature"][i]*logR_equation[3])
  #print(data_frame["CNV"][i]*logR_equation[4])
  #print("")
  if y<-8.5:
    print(data_frame["Sample"][i], data_frame["DIAGNOSIS"][i], y, "MMRd")
  #else:
    #print(data_frame["Sample"][i], data_frame["DIAGNOSIS"][i], y, "MMRp")